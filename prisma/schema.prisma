// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // NOTE: You probably want to change this to another database later on
  provider = "mysql"

  // This value is read from the .env file.
  url = env("DATABASE_URL")

  // For PlanetScale
  relationMode = "prisma"
}

// These are for Authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  subscribed        Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  role          Role      @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  appointments  Appointment[]
  reports       Report[]
}

enum ReportStatus {
  Pending
  Accepted
  Resolved
  Rejected
}
model Report {
  id            String   @id @default(cuid())
  incident      String  
  description   String  @db.VarChar(250)
  feedback      String?  @db.VarChar(250)
  status        ReportStatus @default(Pending)
  isArchive     Boolean @default(false)
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}
enum AppointmentStatus {
  Pending
  Rejected
  Accepted
  Finished
}
model Appointment {
  id            String   @id @default(cuid())
  date          String
  time          String
  reason        String  @db.VarChar(250)
  course        String
  year          String
  status        AppointmentStatus @default(Pending)
  isArchive     Boolean @default(false)
  userId        String
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Seminar {
  id            String   @id @default(cuid())
  title         String
  guest_speaker String
  date          String
  location      String
  isArchive     Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Career {
  id            String   @id @default(cuid())
  title         String
  location      String
  description   String   @db.VarChar(500)
  date          String
  isArchive     Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UniversityMissionVision {
  id          String   @id @default(cuid())
  title       String?
  description String   @db.VarChar(550)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OSASProfile {
  id            String   @id @default(cuid())
  title         String?
  description   String   @db.VarChar(550)
  isArchive     Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OSASFunctions {
  id            String   @id @default(cuid())
  osasFunction  String   @db.VarChar(300)
  isArchive     Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GCOProfile {
  id            String   @id @default(cuid())
  title         String?
  description   String   @db.VarChar(550)
  isArchive     Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GCOServices {
  id            String   @id @default(cuid())
  service       String
  isArchive     Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model EmegergencyHotline {
  id            String   @id @default(cuid())
  organization  String
  number        String   @db.VarChar(255)
  location      String
  isArchive     Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ChatBot {
  id            String   @id @default(cuid())
  keyword       String
  answer        String   @db.VarChar(1000)
  isArchive     Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
